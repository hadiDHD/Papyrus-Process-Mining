= Architecture of Papyrus-SiriusDiag =
This framework has been developed to be used only when a sirius diagram is opened.

==Git Architecture==
*'''plugins/infra/siriusdiag'''
**'''modelexplorer''':contains code allowing to display and use sirius diagram in the papyrus model explorer
**'''properties''': contains code to visualize the properties of sirius diagrams 
**'''representation''': contains the code to create sirius diagram views
**'''representation.architecture''': contains the code to create specific sirius diagram
**'''representation.edit''': plugin defining sirius diagram prototype
**'''sirius''': plugin containing sirius services to handle session
**'''siriusdiag.ui''': plugin handling sirius diagram views and session management

*'''plugins\uml\sirius'''
**'''clazz.diagram''': contains class diagram description and services
**'''common.diagram''': contains all the common services that can be used by all diagrams 
**'''diagram.architecture''': contains all the common services that can be used by all diagrams
**'''sequence.diagram''': contains sequence diagram description and services
**'''statemachine.diagram''': contains statemachine diagram description and services
**'''xtext.integration.ui''': contains customization to add xtext on label edition


= Sirius viewpoint =

Each new diagram contribution is added in a new plugin, which contains the description of the mapping, the filters and the tools available for this diagram.

For more information about viewpoint description, you can have a look at the sirius documentation available here:
https://www.eclipse.org/sirius/doc/specifier/general/Specifying_Viewpoints.html

Note that each viewpoint shall reuse:
* The common layer which is a mandatory layer defining the common concept of all diagrams (Hyperlink and Benpoint).
* The common tool, for navigation, deletion, etc.
* Common and specific java services. 

= Adding a new diagram to the architecture file =

The editor provided to edit the DocumentStructureTemplate metamodel is not exactly the version generated by EMF. We customized it in order to use a TransactionalEditingDomain (to ease the Papyrus integration). 

When we add a new Sirius diagram, we shall create a new Sirius diagram prototype:
 
[[File:../../../image/dev/1_ViewCreation.png]]

Once the Sirius Diagram Prototype has been created, it shall be defined as in the following picture:

[[File:../../../image/dev/5_DefineRepresentation.png]]

To be able to reference the corresponding Diagram Description, it shall first be loaded in order to reference it. This can be done as in the following image:

[[File:../../../image/dev/2_LoadViewpoint.png]]

And select the corresponding *.odesign file using the Browse Workspace:

[[File:../../../image/dev/2_SelectOdesign.png]]

Once the Sirius Diagram Prototype has been created. We shall select on which viewpoint this representation shall be allowed. To do this, select the viewpoint and add a Representation Kinds:

[[File:../../../image/dev/4_AddRespresentation.png]]

And simply select the diagram prototype that was created on the previous step.

[[File:../../../image/dev/3_RegisterRepresentation.png]]

This shall be done for both Analysis and Design viewpoint.

== Adding the creation command==

In the org.eclipse.papyrus.infra.siriusdiag.representation.architecture plugin, a new class extending the AbstractCreateSiriusDiagramEditorCommand shall be created. This class will manage the condition of the creation of the diagram and the action to execute before creating it depending on the context.

For example, a sequence diagram can be created directly under an interaction without prior action, but if we want to create it under a Model, an interaction shall be created before and defined as the root of the diagram.

= Sirius session management =

To use the same transactional editing domain than other papyrus services, we had to override the default sirius session and creation. This is done by the PapyrusSessionFactory which allows to create PapyrusSession (which are just sirius session with the right TransactionalEditingDomain).

For new services using session, it is recommanded to use the SessionService provided in the org.eclipse.papyrus.infra.siriusdiag.ui plugin. 

= Common Diagram =

== Common concepts ==

=== Bendpoints ===

Benpoints mapping is used to draw a Benpoint node at the intersection of edges when the Benpoints filter is activated.

=== Hyperlink ===

Hyperlink node is used to add a node in the diagram that allows to navigate to other representation.

=== Refresh provider ===

In some sirius diagrams, for several purpose (region management, bendpoints and sequence diagram reorder), the post refresh behavior of sirius diagrams have been overriden.

To override this behavior, we have used the following extension point org.eclipse.sirius.refreshExtensionProvider.

=== Common services ===

* PapyrusSiriusTabbarContributor allows to enable or deactivate tools in the sirius tabbar.

[[File:../../../image/dev/6_SiriusTabbar.png]]

* AbstractDiagramServices is used to manage Label node label, node creation and node drag and drop tools.

* AddElementToDiagramServices handles precondition for creation tool.

* LabelServices handles direct edition of labels.

* TooltipServices helps to provide a tooltip for each tools of the palette.

* DeleteFromModelHandler handles the deletion of semantic element.

* Hyperlink and Shortcut services handles navigation, creation of hyperlink and shortcut.

= Class Diagram =

The class diagram code is located in the 
org.eclipse.papyrus.uml.sirius.clazz.diagram plugin.

== Services==

* ClassDiagramServices handles services used by tools of the class diagram for creation, reconnection, etc.

== Description ==

The diagram description is located in the papyrus_class.odesign:

The Class layer defines all the mapping and tools specific to the class diagram:
* NodeContainer, Node, Edge and BorderedNode mapping.
* The style of each node
* The Nodes tool section define the Nodes palette tools behavior, which are mostly creation tools.
* The Edges tool section define the Edges palette tools behavior, which are mostly creation tools.
* The Features tool section define the drag and drop from model and from representations, tools for the label edition and tools for deletion. 
* The Relationships tool section define the reconnection tools and some deletion tools.

= State Machine Diagram =

The State Machine diagram code is located in the 
org.eclipse.papyrus.uml.sirius.statemachine.diagram plugin.

== Services ==

To handle the specific behavior of Region, since both VerticalStack or HorizontalStack children presentations could not handle the mixed behavior of region (sometimes vertical and sometimes horizontal). Hence, the Freeform children presentation is used combined to a manageRegionPresentation and setChildRepresentation method that allows to chose between either horizontal and vertical.

== Description ==

The diagram description is located in the papyrus_statemachine.odesign:

The State Machine layer defines all the mapping and tools specific to the state machine diagram:
* NodeContainer, Node, Edge and BorderedNode mapping.
* The style of each node.
* The Nodes tool section define the Nodes palette tools behavior (mostly creation tools), drag and drop from model or from representation tools, label edition tools and deletion tools.
* The Edges tool section define the Edges palette tools behavior (mostly creation tools) and reconnection tools.

= Sequence Diagram =

The Sequence diagram code is located in the 
org.eclipse.papyrus.uml.sirius.sequence.diagram plugin.

== Services ==

* Each services available in org.eclipse.papyrus.uml.sirius.sequence.diagram.services refers to one kind of element and handles the creation, reconnection and precondition for tools linked to this element.

* ReorderSequenceRegistry, ReorderService and RefreshSequenceExtensionProvider are used to handle the reordering of all the diagram when moving elements.

== Description ==

The diagram description is located in the papyrus_sequence.odesign:

The Sequence layer defines all the mapping and tools specific to the Sequence diagram:
* InstanceRole, NodeContainer, Node, Edge, BorederedNode, Execution, State, CombinedFragment, InteractionUse and ObservationPoint mapping.
* The style of each mapping.
* The Nodes tool section define the Nodes palette tools behavior (mostly creation tools) and label edition tools.
* The Edges tool section define the Edges palette tools behavior (mostly creation tools).
* The Tools tool section define reconnection tools, reodering tools, label edition tools and deletion tools.

= Xtext integration =

Code in org.eclipse.papyrus.uml.sirius.xtext.integration.ui override classic editpart to add an xtext parser on each label edition.

= Test coverage =

The common method to create new tests for sirius diagram is located in org.eclipse.papyrus.siriusdiag.junit.utils. In this plugin, the SiriusDiagramEditorFixture provide all the method to load model, ope session, tests tools that will be used in the several test case.

Each specific diagram is tested in a specific plugin. Those tests include:
* Diagram creation
* Diagram deletion
* Creation tools tests
* Drag and Drop tools tests
* Deletion
